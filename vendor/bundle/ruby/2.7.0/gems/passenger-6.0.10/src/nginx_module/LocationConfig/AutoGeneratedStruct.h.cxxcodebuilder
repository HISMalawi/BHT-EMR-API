#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/nginx/config_options'

def main
  set_indent_string '    '
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    LocationConfig/AutoGeneratedStruct.h is automatically generated from
    LocationConfig/AutoGeneratedStruct.h.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/nginx/config_options.rb.
    Edits to LocationConfig/AutoGeneratedStruct.h will be lost.

    To update LocationConfig/AutoGeneratedStruct.h:
      rake nginx

    To force regeneration of LocationConfig/AutoGeneratedStruct.h:
      rm -f src/nginx_module/LocationConfig/AutoGeneratedStruct.h
      rake src/nginx_module/LocationConfig/AutoGeneratedStruct.h
  }

  separator

  typedef_struct 'passenger_autogenerated_loc_conf_t' do
    value_definitions.each do |definition|
      field(definition[0])
    end

    separator

    source_location_definitions.each do |definition|
      field("ngx_str_t #{definition}_source_file")
    end

    separator

    source_location_definitions.each do |definition|
      field("ngx_uint_t #{definition}_source_line")
    end

    separator

    source_location_definitions.each do |definition|
      field("ngx_int_t #{definition}_explicitly_set")
    end
  end
end

def filter_options_eligible_for_value_definitions(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./ ||
      option[:struct] == 'NGX_HTTP_MAIN_CONF_OFFSET'
  end
end

def filter_options_eligible_for_source_location_definitions(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:struct] == 'NGX_HTTP_MAIN_CONF_OFFSET'
  end
end

def value_struct_field_for(option)
  if option.has_key?(:field)
    option[:field].to_s
  else
    option[:name].sub(/^passenger_/, '')
  end
end

def source_location_struct_field_for(option)
  result = value_struct_field_for(option)
  result.gsub('.', '_')
end

# Returns [definition_source, estimated_size_on_x86_64, field_name]
def definition_for(option)
  field = value_struct_field_for(option)
  case option[:type]
  when :string
    return ["ngx_str_t #{field}", 8 + 4, field]
  when :integer
    return ["ngx_int_t #{field}", 8, field]
  when :uinteger
    return ["ngx_uint_t #{field}", 8, field]
  when :flag
    return ["ngx_flag_t #{field}", 8, field]
  when :string_array, :string_keyval
    return ["ngx_array_t *#{field}", 8, field];
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
end

def value_definitions
  @value_definitions ||= begin
    eligible_options = filter_options_eligible_for_value_definitions(NGINX_CONFIGURATION_OPTIONS)
    definitions = eligible_options.map { |o| definition_for(o) }
    # Sort the definitions by size in order to make the struct smaller.
    # It's possible to make it even smaller with a smarter algorithm but for now
    # I don't bother.
    definitions.sort! do |d1, d2|
      if d1[1] == d2[1]
        # After sorting on size, sort alphabetically.
        d1[2] <=> d2[2]
      else
        d1[1] <=> d2[1]
      end
    end
  end
end

def source_location_definitions
  @source_location_definitions ||= begin
    eligible_options = filter_options_eligible_for_source_location_definitions(NGINX_CONFIGURATION_OPTIONS)
    definitions = eligible_options.map do |o|
      source_location_struct_field_for(o)
    end
    definitions.sort!
  end
end

main
