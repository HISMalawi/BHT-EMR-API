#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2018 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  add_code %Q[
    #ifndef _PASSENGER_APACHE2_MODULE_AUTOGENERATED_HEADER_SERIALIZATION_CPP_
    #define _PASSENGER_APACHE2_MODULE_AUTOGENERATED_HEADER_SERIALIZATION_CPP_

    #ifdef INTELLISENSE
      // These includes do nothing, but keep IntelliSense happy.
      #include <ap_config.h>
      #include <string>
      #include "../Config.h"
    #endif

    namespace Passenger {
    namespace Apache2Module {
  ]

  separator

  comment %q{
    DirConfig/AutoGeneratedHeaderSerialization.cpp is automatically generated from
    DirConfig/AutoGeneratedHeaderSerialization.cpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to DirConfig/AutoGeneratedHeaderSerialization.cpp will be lost.

    To update DirConfig/AutoGeneratedHeaderSerialization.cpp:
      rake apache2

    To force regeneration of DirConfig/AutoGeneratedHeaderSerialization.cpp:
      rm -f src/apache2_module/DirConfig/AutoGeneratedHeaderSerialization.cpp
      rake src/apache2_module/DirConfig/AutoGeneratedHeaderSerialization.cpp
  }

  separator

  function 'static void constructRequestHeaders_autoGenerated(request_rec *r, DirConfig *config, std::string &result)' do
    filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS).each do |option|
      if option[:type] == :string || option[:type] == :flag
        add_code %Q{
          addHeader(result, StaticString(#{header_name_for(option)},
              sizeof(#{header_name_for(option)}) - 1),
            #{header_expression_for(option)});
        }
      elsif option[:type] == :integer
        add_code %Q{
          addHeader(r, result, StaticString(#{header_name_for(option)},
              sizeof(#{header_name_for(option)}) - 1),
            #{header_expression_for(option)});
        }
      else
        raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
      end
    end
  end

  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger

    #endif /* _PASSENGER_APACHE2_MODULE_AUTOGENERATED_HEADER_SERIALIZATION_CPP_ */
  ]
end

def filter_eligible_options(options)
  return options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] == :global ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./ ||
      (option.has_key?(:header) && !option[:header])
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    "m#{result}"
  end
end

def header_name_for(option)
  if option[:header]
    "!~#{option[:header]}".inspect
  else
    result = option[:name].sub(/^Passenger/, '')
    result.gsub!(/([A-Z])/, '_\1')
    "!~PASSENGER#{result.upcase}".inspect
  end
end

def header_expression_for(option)
  if option[:header_expression]
    option[:header_expression]
  else
    "config->" + struct_field_for(option)
  end
end

main
