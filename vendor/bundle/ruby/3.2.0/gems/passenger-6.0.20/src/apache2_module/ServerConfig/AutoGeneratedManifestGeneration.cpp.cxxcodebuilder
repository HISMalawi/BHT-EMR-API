#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    ServerConfig/AutoGeneratedManifestGeneration.cpp is automatically generated from ServerConfig/AutoGeneratedManifestGeneration.cpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to ServerConfig/AutoGeneratedManifestGeneration.cpp will be lost.

    To update ServerConfig/AutoGeneratedManifestGeneration.cpp:
      rake apache2

    To force regeneration of ServerConfig/AutoGeneratedManifestGeneration.cpp:
      rm -f src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
      rake src/apache2_module/ServerConfig/AutoGeneratedManifestGeneration.cpp
  }

  separator

  add_code %Q{
    #include "../ConfigGeneral/ManifestGeneration.h"
  }

  separator

  add_code %Q[
    namespace Passenger {
    namespace Apache2Module {
  ]

  separator
  separator

  function('void ConfigManifestGenerator::autoGenerated_generateConfigManifestForServerConfig()') do
    add_code %Q{
      Json::Value &globalOptionsContainer = manifest["global_configuration"];
    }

    separator

    filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS).each do |option|
      source_location_struct_field = source_location_struct_field_for(option)

      add_code %Q[
        if (serverConfig.#{source_location_struct_field}ExplicitlySet) {
          Json::Value &optionContainer = findOrCreateOptionContainer(globalOptionsContainer,
            #{option[:name].inspect},
            sizeof(#{option[:name].inspect}) - 1);
          Json::Value &hierarchyMember = addOptionContainerHierarchyMember(optionContainer,
            serverConfig.#{source_location_struct_field}SourceFile,
            serverConfig.#{source_location_struct_field}SourceLine);
      ]
      indent do
        add_tracking_value_serialization_code(option)
      end
      add_code %Q[
        }
      ]
    end
  end

  separator
  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger
  ]
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] != :global ||
      option.fetch(:field, true).nil?
  end
end

def value_struct_field_for(option)
  if option.key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    result[0] = result[0..0].downcase
    result
  end
end

def source_location_struct_field_for(option)
  value_struct_field_for(option)
end

def add_tracking_value_serialization_code(option)
  value_struct_field = value_struct_field_for(option)

  case option[:type]
  when :string
    add_code %Q{
      hierarchyMember["value"] = Json::Value(
        serverConfig.#{value_struct_field}.data(),
        serverConfig.#{value_struct_field}.data() + serverConfig.#{value_struct_field}.size());
    }
  when :flag
    add_code %Q{
      hierarchyMember["value"] = serverConfig.#{value_struct_field} == Apache2Module::ENABLED;
    }
  when :integer
    add_code %Q{
      hierarchyMember["value"] = serverConfig.#{value_struct_field};
    }
  when :string_set
    add_code %Q{
      hierarchyMember["value"] = strCollectionToJson< std::set<std::string>, std::string >(
        serverConfig.#{value_struct_field});
    }
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
end

main
