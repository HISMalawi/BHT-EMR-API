#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2018 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  add_code %Q{
    #ifdef INTELLISENSE
      // These includes do nothing, but keep IntelliSense happy.
      #include <ap_config.h>
      #include "../Config.h"
    #endif
  }

  separator

  comment %q{
    DirConfig/AutoGeneratedMergeFunction.cpp is automatically generated from DirConfig/AutoGeneratedMergeFunction.cpp.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to DirConfig/AutoGeneratedMergeFunction.cpp will be lost.

    To update DirConfig/AutoGeneratedMergeFunction.cpp:
      rake apache2

    To force regeneration of DirConfig/AutoGeneratedMergeFunction.cpp:
      rm -f src/apache2_module/DirConfig/AutoGeneratedMergeFunction.cpp
      rake src/apache2_module/DirConfig/AutoGeneratedMergeFunction.cpp
  }

  separator

  add_code %Q[
    namespace Passenger {
    namespace Apache2Module {
  ]

  separator

  function 'static void mergeDirConfig_autoGenerated(DirConfig *config, DirConfig *base, DirConfig *add)' do
    options = filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS)

    options.each do |option|
      add_merge_code(option)
    end

    separator

    options.each do |option|
      field_name = struct_field_for(option)
      add_code %Q{
        config->#{field_name}SourceFile = add->#{field_name}SourceFile;
      }
    end

    separator

    options.each do |option|
      field_name = struct_field_for(option)
      add_code %Q{
        config->#{field_name}SourceLine = add->#{field_name}SourceLine;
      }
    end

    separator

    options.each do |option|
      field_name = struct_field_for(option)
      add_code %Q{
        config->#{field_name}ExplicitlySet = add->#{field_name}ExplicitlySet;
      }
    end
  end

  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger
  ]
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] == :global ||
      option.fetch(:field, true).nil?
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    result = option[:name].sub(/^Passenger/, '')
    "m#{result}"
  end
end

def add_merge_code(option)
  field_def = struct_field_for(option)

  case option[:type]
  when :string, :string_set
    add_code %Q{
      config->#{field_def} =
        (!add->#{field_def}.empty())
        ? add->#{field_def}
        : base->#{field_def};
    }
  when :integer
    add_code %Q{
      config->#{field_def} =
        (add->#{field_def} != UNSET_INT_VALUE)
        ? add->#{field_def}
        : base->#{field_def};
    }
  when :flag
    add_code %Q{
      config->#{field_def} =
        (add->#{field_def} != Apache2Module::UNSET)
        ? add->#{field_def}
        : base->#{field_def};
    }
  else
    raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
  end
end

main
