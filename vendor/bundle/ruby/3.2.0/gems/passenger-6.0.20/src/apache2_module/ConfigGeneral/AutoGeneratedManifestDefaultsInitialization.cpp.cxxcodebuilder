#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/apache2/config_options'

def main
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp is automatically generated from
    ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp.cxxcodebuilder,
    using ConfigGeneral/AutoGeneratedManifestDefaultsInitialization from src/ruby_supportlib/phusion_passenger/apache2/config_options.rb.
    Edits to ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp will be lost.

    To update ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp:
      rake apache2

    To force regeneration of ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp:
      rm -f src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
      rake src/apache2_module/ConfigGeneral/AutoGeneratedManifestDefaultsInitialization.cpp
  }

  separator

  add_code %Q{
    #include "ManifestGeneration.h"
  }

  separator

  add_code %Q[
    namespace Passenger {
    namespace Apache2Module {
  ]

  separator
  separator

  function('void ConfigManifestGenerator::autoGenerated_setGlobalConfigDefaults()') do
    add_code %Q{
      Json::Value &globalConfigContainer = manifest["global_configuration"];
    }
    separator
    filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS, :global).each do |option|
      emit_manifest_config_entry_default_adding_code(option, 'globalConfigContainer')
      separator
    end
  end

  function('void ConfigManifestGenerator::autoGenerated_setAppConfigDefaults()') \
  do
    add_code %Q{
      Json::Value &defaultAppConfigContainer = manifest["default_application_configuration"];
    }
    separator
    filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS, :application).each do |option|
      emit_manifest_config_entry_default_adding_code(option, 'defaultAppConfigContainer')
      separator
    end
  end

  function('void ConfigManifestGenerator::autoGenerated_setLocationConfigDefaults()') \
  do
    add_code %Q{
      Json::Value &defaultLocConfigContainer = manifest["default_location_configuration"];
    }
    separator
    filter_eligible_options(APACHE2_CONFIGURATION_OPTIONS, :location).each do |option|
      emit_manifest_config_entry_default_adding_code(option, 'defaultLocConfigContainer')
      separator
    end
  end

  separator
  separator

  add_code %Q[
    } // namespace Apache2Module
    } // namespace Passenger
  ]
end

def filter_eligible_options(options, context)
  options.reject do |option|
    option[:alias_for] ||
      option[:obsolete] ||
      option[:context] != context ||
      option.fetch(:field, true).nil? ||
      (option[:default].nil? && option[:default_expr].nil? && option[:dynamic_default].nil?)
  end
end

def emit_manifest_config_entry_default_adding_code(option, var_name)
  if option[:dynamic_default]
    add_code %Q{
      addOptionsContainerDynamicDefault(
        #{var_name},
        #{option[:name].inspect},
        P_STATIC_STRING(#{option[:dynamic_default].inspect}));
    }
  else
    case option[:type]
    when :string
      if option[:default_expr]
        default_expr = option[:default_expr]
      else
        default_expr = "P_STATIC_STRING(#{option[:default].inspect})"
      end
      add_code %Q{
        addOptionsContainerStaticDefaultStr(
          #{var_name},
          #{option[:name].inspect},
          #{default_expr});
      }
    when :integer
      if option[:default_expr]
        default_expr = option[:default_expr]
      else
        default_expr = option[:default].inspect
      end
      add_code %Q{
        addOptionsContainerStaticDefaultInt(
          #{var_name},
          #{option[:name].inspect},
          #{default_expr});
      }
    when :flag
      if option[:default_expr]
        default_expr = option[:default_expr]
      else
        default_expr = option[:default].inspect
      end
      add_code %Q{
        addOptionsContainerStaticDefaultBool(
          #{var_name},
          #{option[:name].inspect},
          #{default_expr});
      }
    else
      raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
    end
  end
end

main
